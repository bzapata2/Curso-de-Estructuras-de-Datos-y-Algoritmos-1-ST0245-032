public class punto1{
    	public int aMax(int[] A) {
        	return subAMax(A, A.length-1);
    	}
    
    	private int subAMax(int[] A, int n) {
        	int temp,max;
        	if(n==0) max=A[0];
        	else {
            		max=A[n];
            		temp=subAMax(A,n-1);
            		if(temp>max) max=temp;
        	} return max;
    	}
}



import java.util.Random;

public class Punto2 {
	public boolean groupSum(int start, int[] nums, int target) {
		if (start >= nums.length) return target == 0;
		return groupSum(start + 1, nums, target - nums[start]) || 		
		groupSum(start + 1, nums, target);
	}

	public void probarGroupSum(int start, int[] nums, int target) {
		long startTime = System.currentTimeMillis(); 
		groupSum(start, nums, target);

		long estimatedTime = System.currentTimeMillis() - startTime;
		System.out.println(estimatedTime);
	}

	public static int[] f(int size) {
        	int max = 5000;
        	int[] array = new int[size];
        	Random generator = new Random();
        	for (int i =0; i<size; i++){
           	 	array[i] = generator.nextInt(max);
        	}
        	return array;
    	}

}

 

public class Punto3 {
	public static long fibonacci(int n) {
		if (n>1){
			return fibonacci(n-1) + fibonacci(n-2); //función recursiva
		} else if (n==1) { // caso base
			return 1;
		} else if (n==0){ // caso base
			return 0;
		} else{ //error
			System.out.println("Debes ingresar un numero mayor o igual a 1");
			return -1;
		}
	}

	public static void probarFibonacci(int n) {
		long startTime = System.currentTimeMillis(); 
		fibonacci(n);
		long estimatedTime = System.currentTimeMillis() - startTime;
		System.out.println(estimatedTime);
	}
}

