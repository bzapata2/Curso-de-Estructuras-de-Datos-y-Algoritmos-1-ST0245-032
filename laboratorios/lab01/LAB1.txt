import java.util.Random;
import java.math.BigInteger;
public class ArraySum {

    BigInteger a = BigInteger.ZERO;
    public static BigInteger[] f(int size) {
        BigInteger [] arr = new BigInteger[size];
        for (int i = 0; i < size ; i++){
            arr[i] = BigInteger.valueOf((int)(Math.random() * 5) + 1);
        }
        return arr;
    }

    public static BigInteger Arr2() {
        return Arr2(f(10000),BigInteger.ZERO,0);
    }


    public static BigInteger Arr(BigInteger[] nums) {
        return Arr2(nums,BigInteger.ZERO,0);
    }

    private static BigInteger groupArr2( BigInteger [] nums,BigInteger suma,int i) {
        if (i == nums.length){ 
            return suma;
        }else{
            suma = suma.add(nums[i]);
            return pArr2(nums,suma,i+1);
        }
    } 
}

/////////////////////////////////////////////////////////////////////

public class ArrayMax {
    private static int [] GenArr(int a){
        int b = 0;
        int c[]= new int[a];
        while(b < a){
            c[b] = (int)(Math.random() * 5) + 1;
            b++;
        }
        return c;
    }

    public static int MaxArr(int [] a){
        return MaxArrAux(a,0,0);
    }

    public static int MaxArrGen(){
        return MaxArrAux(GenArr(1000),0,0);
    }

    private static int MaxArrAux(int[]a,int i,int Max){
        if(i == a.length) { return Max;
        }else if(a[i]>Max){
            Max = a[i];
            return MaxArrAux(a,i+1,Max);
        }else{
            return MaxArrAux(a,i+1,Max);
        }
    }
}

//////////////////////////////////////////////////////////////

public class Fibonacci {
    public static int fibo(int n){
        if(n <= 1){
            return 1;
        }else{
            return fibo(n-1) + fibo(n-2);    
        }
    }
}